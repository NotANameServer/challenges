#ifndef CELL_H
#define CELL_H

#include <QObject>
#include <QColor>

/**
 * @brief The Forest enum
 *
 * L'Ã©tat d'une forÃªt :
 *
 * YOUNG      : ForÃªt jeune ðŸŒ± (vert clair)
 * OLD        : ForÃªt ancienne ðŸŒ³ (vert foncÃ©)
 * BEGIN_FIRE : DÃ©but de combustion ðŸŽ‡ (jaune)
 * ON_FIRE    : En combustion ðŸ”¥ (rouge)
 * END_FIRE   : Fin de combustion ðŸ§¯ (orange)
 * ASH        : Cendres ðŸ’€ (noir)
 * ANY        : Aucune, pour mettre un Ã©tat Ã  une Condition
 */
enum Forest{
    YOUNG, OLD, BEGIN_FIRE, ON_FIRE, END_FIRE, ASH, ANY
};

/**
 * @brief The Condition struct
 *
 * Condition sur le voisinage pour qu'une forÃªt change d'Ã©tat.
 *
 * On ramÃ¨ne la probability Ã  1 c'est Ã  dire <1,n> avec n âˆˆ â„•.
 *
 * Ex  : Une voisine au moins en dÃ©but de combustion avec une probabilitÃ© de 1% (probability<1,100>)
 * Ex2 : Cinq voisines au moins en forÃªt ancienne avec une probabilitÃ© de 0,005% (5/100 000 donc probability<1,20 000>)
 * Ex3 : Aucune (forest=Forest::ANY et nbNeighbor=0) condition avec une probabilitÃ© de 10% (10/100 donc probability<1,10>)
 */
struct Condition {
    Forest forest;
    int nbNeighbor;
    QPair<int,int> probability;
    Forest next_forest;
};

/**
 * @brief The Etat struct
 *
 * Etat d'une forÃªt (par dÃ©faut elle est en cendre) et ses conditions pour changer d'Ã©tat.
 *
 * La liste des conditions est Ã  prendre en compte par prioritÃ©.
 * C'est Ã  dire que la premiÃ¨re condition remplie, elle fait changer d'Ã©tat la forÃªt et les suivantes sont ignorÃ©es.
 *
 * La prioritÃ© est portÃ©e par l'indice du vecteur conditions :
 *  -> conditions[n-1] > conditions[n] > conditions[n+1] avec n âˆˆ â„•
 *                  (x>y x est plus prioritaire que y)
 */
struct Etat {
    Forest forest = ASH;
    //QColor color = QColorConstants::Svg::black;
    QVector<Condition> conditions;
};

/**
 * @brief The Cell class
 *
 * ReprÃ©sente la position d'une forÃªt sur une surface 2D et son Ã©tat.
 */
class Cell : public QObject
{
    Q_OBJECT

public:

    //https://www.w3.org/TR/SVG11/types.html#ColorKeywords
    static const QVector<QColor> colors;
    static const QVector<QString> icons;

    //reprÃ©sente les diffÃ©rents Ã©tats possible d'une forÃªt
    static const struct Etat etatYoung;
    static const struct Etat etatOld;
    static const struct Etat etatBegingFire;
    static const struct Etat etatOnFire;
    static const struct Etat etatEndFire;
    static const struct Etat etatAsh;

    static const QVector<Etat> etats;

    static QColor getColorOfForest(Forest forest);

    explicit Cell(QPair<int,int> coord, Forest typeForest = Forest::ASH, QObject *parent = nullptr);

    QColor getColor() const;

    QPair<int,int> m_coord;
    Forest getTypeForest() const;
    void setTypeForest(Forest forest);
    QVector<Condition> getConditions() const;

private:
    Forest m_typeForest;

signals:

};

#endif // CELL_H
