
Sudoku 4x4 modélisé comme un problème SAT : 

On écrit ici le triplet (n,l,c) pour dire "il y a un n sur la l-ième ligne et la c-ième colonne"
Et on écrit son "opposé" NON(n,l,c) pour dire "il n'y a pas de n sur la l-ième ligne et la c-ième colonne"
Ces deux triplets sont appelés des "litteraux" le premier est un littéral positif, le deuxième un litteral négatif.

Une clause consiste en 0 ou plusieurs littéraux séparés par des OU (inclusifs), par exemple
NON(1,3,2) OU (3,1,2) OU NON(2,2,3)

Et un énoncé SAT consiste en 0 ou plusieurs clauses séparés par des ET, par exemple
((1,2,3) OU (4,2,4)) ET (NON(1,2,4))

Pour modéliser la grille suivante sous la forme d'un énoncé SAT

1  3
 3 4
4132
3 
On donne une clause de 1 littéral par chiffre déjà placé : 
((1,1,1)) ET ((3,1,3)) ET (3,2,2)) ET ((4,2,4))...ET ((3,4,1))

Et enfin comme on ne peut pas dire de façon courte "chaque chiffre est présent une seule fois par ligne, colonne, carré" 
on va se débrouiller autrement : 

comme chaque chiffre et présent au moins une fois par ligne, on a pour chaque chiffre n de 1 à 4
  ((n,1,1) OU (n,1,2) OU (n,1,3) OU (n,1,4))
 ET ((n,2,1) OU (n,2,2) OU (n,2,3) OU (n,2,4))
 ET ((n,3,1) OU (n,3,2) OU (1,3,3) OU (n,3,4))
 ET ((n,4,1) OU (n,4,2) OU (n,4,3) OU (n,4,4))
 
 de même comme chaque chiffre n est présent au mois une fois par colonne, on ajoute pour chaque n 
 ((n,1,1) OU (n,2,1) OU (n,3,1) OU (n,4,1))
 ET (n,1,2) OU (n,2,2) OU (n,3,2) OU (n,4,2))
 ET (n,1,3) OU (n,2,3) OU (n,3,3) OU (n,4,3))
 ET (n,1,4) OU (n,2,4) OU (n,3,4) OU (n,4,4))
 
 de plus comme chaque chiffre n est également présent au moins une fois par carré de 4, on a :
 ((n,1,1) OU (n,1,2) OU (n,2,1) OU (n,2,2))
 ET (n,1,3) OU (n,1,4) OU (n,2,3) OU (n,2,4))
 ET (n,3,1) OU (n,3,2) OU (n,4,1) OU (n,4,2))
 ET (n,3,3) OU (n,3,4) OU (n,4,3) OU (n,4,4))

et comme on a jamais 2 chiffres sur une même case, on a donc pour chaque ligne l et chaque colonne c 
(NON(1,l,c) OU NON(2,l,c)) ET (NON(1,l,c) OU NON(3,l,c)) ET (NON(1,l,c) OU NON(4,l,c))
ET (NON(2,l,c) OU NON(3,l,c)) ET (NON(2,l,c) OU NON(4,l,c)) 
ET (NON(3,l,c) OU NON(4,l,c))

Une fois qu'on a modélisé toutes ces clauses, avec des boucles "for" à foison, il existe plein de "solveurs-SAT" 
c'est à dire des programmes qui nous donnent toutes les combinaisons minimales
 de (n,l,c)/NON(n,l,c) qui, en étant vrais en même temps, rendent forcément vrai l'énoncé
 (c'est à dire que si la combinaison {a,NON(b)} est donnée solution, 
 alors {a,NON(b),c} et {a,NON(b),NON(c)} rendent chacune vrai l'énoncé)
Comme notre grille de Sudoku est bien faite, on a un seul (n,l,c) vrai par case l,c. 

Le principe et le même avec des grilles de 9x9 ou plus.
Les solveurs SAT sont généralement basés sur la méthode suivante dite DPLL, issue des travaux en 1962 par Davis,Putnam,Logemann et Loveland 


DPLL(Combinaison,Clauses):
    Si Clauses contient une clause vide : 
        retourner {}
    Pour toute clause de Clauses réduite à un seul litteral L:
        ajouter L à Combinaison
        supprimer dans Clauses toutes les clauses contenant L 
        retirer dans chaque clause de Clauses, le litteral opposé à L
    Pour tout litteral L dans Clauses, tel que son opposé n'apparait pas dans Clauses : 
        ajouter L à Combinaison
        supprimer dans Clauses toutes les clauses contenant L
    Si clauses est vide :
        retourner {Combinaison}
    choisir un litteral positif L 
    Comb1 <- UNION (Combinaison,{L})
    Comb2 <- UNION (Combinaison,{NON L})
    Cl1 <- Clauses moins les clauses contenant L 
            et en supprimant NON L des autres clauses
    CL2 <- Clauses moins les clauses contenant NON L 
            et en supprimant L des autres clauses
    retourner Union(DPLL(Comb1,Cl1),DPLL(Comb2,Cl2))
    
    En utilisant le module Glucose 3 du package pysat on constate un énorme gain de temps 
    pour résoudre certaines grilles de Sudoku 9x9 par rapport à notre solveur maison, qui bruteforce la grille
    Si certaines grilles sont résolues avec à peu près le même temps par les 2 solveurs (environ 3ms)
    Notre solveur maison met près de 6 secondes pour certaines grilles, là où Glucose 3 plafonne à 100ms

        
        
    




